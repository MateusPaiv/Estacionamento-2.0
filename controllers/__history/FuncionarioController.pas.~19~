unit FuncionarioController;

interface

uses
  SqlDtg,vcl.StdCtrls;
type
  TFuncionarioController = class
    private
    public
      function insertFuncionario(nome,sobrenome,cpf,celular,cep,endereco,numero:string):boolean;
      procedure carregarGrid(Grid:TSqlDtGrid);
      procedure carregarComboBox(combo:TComboBox);
  end;
implementation

uses
  Vcl.Dialogs,Generics.Collections,FuncionarioModel,connection,
  RpDriverAdapter, SqlFun;

{ TFuncionarioController }

procedure TFuncionarioController.carregarComboBox(combo: TComboBox);
var Q:IQuery;
begin
   Q:=SqlToQuery('SELECT * FROM funcionarios');

end;

procedure TFuncionarioController.carregarGrid(Grid: TSqlDtGrid);
var Q:IQuery;
    i:integer;
begin
   i:=1;
   Q:= SqlToQuery('select * from funcionarios');
   if not Q.IsEmpty then begin
     while not Q.Eof do begin
       Grid.Cells[Grid.GetColumn('nome'),i]:=Q.getString('nome');
       Grid.Cells[Grid.GetColumn('sobrenome'),i]:=Q.getString('sobrenome');
       Grid.Cells[Grid.GetColumn('celular'),i]:=Q.getString('celular');
       Grid.Cells[Grid.GetColumn('endereco'),i]:=Q.getString('endereco');
       Grid.Cells[Grid.GetColumn('numero'),i]:=Q.getString('numero');
       inc(i);
       if Grid.RowCount < i then begin
          Grid.CreateNewRow;
       end;
       Q.Next;
     end;
     Q.Free;Q.Close;
   end else begin
     Aviso('nenhum usuário encontrado');
   end;
end;

function TFuncionarioController.insertFuncionario(nome, sobrenome, cpf, celular,cep, endereco, numero: string): boolean;
var listaFuncionario:TObjectList<TFuncionario> ;
begin
   if (nome='') then begin
      MessageDlg('Nome não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
   if (sobrenome='') then begin
      MessageDlg('Sobrenome não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
   if (Cpf='') then begin
      MessageDlg('CPF não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
    if (celular='') then begin
      MessageDlg('Celular não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
   if Length(celular) >11 then begin
      MessageDlg('Celular não pode ter mais que 11 números',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
    if (cep='') then begin
      MessageDlg('CEP não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
    if (endereco='') then begin
      MessageDlg('Endereco não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;
    if (numero='') then begin
      MessageDlg('Número não pode estar vazio',mtinformation,[mbOK],0);
      Result := false;
      exit;
   end;

   Result:=true;
   if Result=true then begin
      listaFuncionario:=TObjectList<TFuncionario>.Create;
      listaFuncionario.Add(TFuncionario.Create(nome,sobrenome,cpf,celular,cep,endereco,numero));
      dm.cadastrarFuncionario(ListaFuncionario);
      listaFuncionario.Free;
   end;
end;

end.
